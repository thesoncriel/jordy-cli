import { ReactNode, forwardRef, useImperativeHandle, useState, useRef } from 'react';
import styled from 'styled-components';
import { PromiseResolverDto } from 'ts-fe-toolkit';

interface {{fileName}}Props {
  defaultShow?: boolean;
  children?: ReactNode;
}

export interface {{fileName}}Handle {
  open(): Promise<void>
}

const Wrap = styled.div`

`;

export const {{fileName}} = forwardRef<
  {{fileName}}Handle,
  {{fileName}}Props
>(({
  defaultShow = false,
  children,
  ...props,
}, ref) => {
  const refResolver = useRef<PromiseResolverDto<void> | null>(null);
  const [show, setShow] = useState(defaultShow);

  useImperativeHandle(
    ref,
    () => ({
      open() {
        return new Promise<void>((resolve, reject) => {
          setShow(true);
          refResolver.current = {
            resolve,
            reject,
          };
        });
      },
    }),
    [],
  );

  const handleCancel = () => {
    setShow(false);
  
    if (refResolver.current) {
      refResolver.current.reject(null);
      // refResolver.current.resolve();
      refResolver.current = null;
    }
  };

  const handleOk = () => {
    setShow(false);
  
    if (refResolver.current) {
      refResolver.current.resolve();
      refResolver.current = null;
    }
  };

  return (
    {/* TODO: 프로젝트 내에서 쓰이는 모달 or 다이얼로그 컴포넌트로 변경 할 것 */}
    <Modal
      title="제목"
      visible={show}
      cancelText="취소"
      okText="확인"
      onCancel={handleCancel}
      onOk={handleOk}
    >
      {children}
    </Modal>
  );
});

{{fileName}}.displayName = '{{fileName}}';
