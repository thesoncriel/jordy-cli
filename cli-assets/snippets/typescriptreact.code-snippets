{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Event for Click": {
    "prefix": "!hdlclick",
    "description": "클릭 이벤트에 대한 핸들러를 만든다.",
    "body": [
      "const handle${1:Click}: React.MouseEventHandler<${2|HTMLButtonElement,HTMLInputElement,HTMLElement|}> = (e) => {",
      "  ${10}",
      "}"
    ]
  },
  "Event for Change": {
    "prefix": "!hdlchange",
    "description": "변경 이벤트에 대한 핸들러를 만든다.",
    "body": [
      "const handle${1:Change}: React.ChangeEventHandler<${2|HTMLInputElement,HTMLTextAreaElement,HTMLElement|}> = (e) => {",
      "  ${10}",
      "}"
    ]
  },
 
  "React Use State Hooks": {
    "prefix": "!usestate",
    "description": "useState 훅스를 만든다.",
    "body": ["const [${1:name}, set${1/(.*)/${0:/capitalize}/}] = useState${0}(${2});"]
  },
  "React Page Component": {
    "prefix": "!rpc",
    "description": "페이지 컴포넌트를 만든다.",
    "body": [
      "import { useEffect } from 'react';",
      "import { useDispatch } from 'react-redux';",
      "import { useQueryParams } from 'jordy';",
      "import { PageContainer } from '@shared/containers/PageContainer';",
      "import { AppDispatch } from '@common/store';",
      "import { ${3:UiParams} } from '../uiStates';",
      "import { refine${3} } from '../manipulates';",
      "",
      "function $TM_FILENAME_BASE() {",
      "  const dispatch = useDispatch<AppDispatch>();",
      "  const params = useQueryParams(refine${3});",
      "",
      "  useEffect(() => {",
      "    dispatch(effSomeAction())",
      "  }, []);",
      "",
      "  return (",
      "    <PageContainer title=\"\">",
      "      $0",
      "    </PageContainer>",
      "  );",
      "};",
      "",
      "export default $TM_FILENAME_BASE;",
      ""
    ]
  },
  "React Container Component": {
    "prefix": "!rcc",
    "description": "컨테이너 컴포넌트를 만든다.",
    "body": [
      "import { ReactNode } from 'react';",
      "import { useDispatch, useSelector } from 'react-redux';",
      "",
      "// eslint-disable-next-line @typescript-eslint/no-empty-interface",
      "interface ${4:${TM_FILENAME_BASE}Props} {",
      "  children?: ReactNode;",
      "}",
      "",
      "export function $TM_FILENAME_BASE({",
      "  children,",
      "}: $4) {",
      "  const dispatch = useDispatch();",
      "  const state = useSelector();",
      "",
      "  return (",
      "    <${10:${TM_FILENAME_BASE/\\Container//gi}}>",
      "    </${10:${TM_FILENAME_BASE/\\Container//gi}}>",
      "  );",
      "};",
      ""
    ]
  },
  "React Single Function Component": {
    "prefix": "!rc",
    "description": "함수형 컴포넌트를 만든다. - 단순한 단일형 컴포넌트.",
    "body": [
      "import { ReactNode } from 'react';",
      "import styled from 'styled-components';",
      "",
      "interface ${1:${TM_FILENAME_BASE}Props} {",
      "  children?: ReactNode;",
      "}",
      "",
      "const ${3:Wrap} = styled.${2:div}`",
      "",
      "`;",
      "",
      "export function $TM_FILENAME_BASE({",
      "  children,",
      "}: $1) {",
      "  return (",
      "    <${3:Wrap}>",
      "      {children}",
      "    </${3:Wrap}>",
      "  );",
      "};",
      ""
    ]
  },
 
  
  "React Storybook Visual Test - Make Sub": {
    "prefix": "!rcssub",
    "description": "스토리북을 통한 하위 리액트 비주얼 테스트 코드를 만든다",
    "body": [
      "const ${2:Some}Template: StoryFn<StoryProps> = ({ ...props }) => {",
      "  const [state, setState] = useState(props);",
      "  return (",
      "    <${1:${TM_FILENAME_BASE/\\.stories//gi}} {...props}></${1}>",
      "  );",
      "};",
      "",
      "export const ${2}: StoryObj<StoryProps> = {",
      "  render: ${2:Some}Template,",
      "",
      "  args: {",
      "    ...Default.args,",
      "    ${0}",
      "  },",
      "};"
    ]
  },
  "React Storybook Visual Test - Make Sub From Template": {
    "prefix": "!rcst",
    "description": "스토리북을 통한 하위 리액트 비주얼 테스트 코드를 만든다. 만들어진 스토리 템플릿을 재활용시 쓰인다.",
    "body": [
      "export const ${2:Some}: StoryObj<StoryProps> = {",
      "  render: ${3:}Template,",
      "",
      "  args: {",
      "    ...Default.args,",
      "    ${0}",
      "  },",
      "};",
    ]
  },
  "react Storybook - ArgType making with select options": {
    "prefix": "!sbarg",
    "description": "스토리북 argType 을 선택 옵션과 함께 만든다.",
    "body": [
      ": {",
      "  control: '${1|radio,inline-radio,select,date,color|}',",
      "  type: {",
      "    name: '${2|enum,union,array,string,number,boolean,object,other|}',",
      "    ${3:value: [],}",
      "  },",
      "},"
    ]
  },
}
