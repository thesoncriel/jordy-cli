{
  
  "Generate Single Selector": {
    "prefix": "!selsingle",
    "description": "단일 셀렉터를 만든다.",
    "body": [
      "export const sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g}${2:WhatState} = createSelector(",
      "  sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g},",
      "  state => {",
      "    return state${0:.someField};",
      "  }",
      ");"
    ]
  },
  "Generate Single Draft Selector": {
    "prefix": "!seldrfsingle",
    "description": "단일 드래프트 셀렉터를 만든다. - 액션이나 이팩트에서 상태값을 셀렉팅 할 때 쓰인다.",
    "body": [
      "export const drf${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g}${2:WhatState} = createDraftSafeSelector${3}(",
      "  sel${TM_FILENAME_BASE/(.*)\\.selector/${1:/capitalize}/g},",
      "  state => {",
      "    return state${0:.someField};",
      "  }",
      ");"
    ]
  },
  
  "Generate Redux Toolkit - Single Effect": {
    "prefix": "!effsingle",
    "description": "단일 이펙트 함수를 만든다.",
    "body": [
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async () => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Effect With Redux Api": {
    "prefix": "!effsingleapi",
    "description": "단일 이펙트 함수를 만든다. Redux Api 가 포함되어 있다.",
    "body": [
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk<",
      "  ${3:ReturnType},",
      "  ${4:PayloadType},",
      "  { state: RootState }",
      ">(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async (payload, { getState, dispatch }) => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Effect With Redux Full Api": {
    "prefix": "!effsingleapifull",
    "description": "단일 이펙트 함수를 만든다. 모든 Redux Api 가 포함되어 있다.",
    "body": [
      "export const eff${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAsyncThunk<",
      "  ${3:ReturnType},",
      "  ${4:PayloadType},",
      "  { state: RootState, rejectValue: MyRejectType }",
      ">(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      "  async (payload, { getState, dispatch, rejectWithValue, signal, requestId }) => {",
      "    const result = await repo${10:.fetchSomeMethod};",
      "",
      "    return result;",
      "  }",
      ");"
    ]
  },
  "Generate Redux Toolkit - Single Normal Action": {
    "prefix": "!actsingle",
    "description": "동기식 액션 하나를 만든다.",
    "body": [
      "export const act${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2:WhatAction} = createAction<${3:PayloadType}>(",
      "  '${TM_FILENAME_BASE/(.*)\\.effect/${1:/capitalize}/g}${2}',",
      ");"
    ]
  },
  
  "Generate Redux Toolkit - Single Action Reducer": {
    "prefix": "!sliceaction",
    "description": "슬라이스 내 액션 리듀서 하나를 만든다.",
    "body": [
      "${1:doSomething}(state, { payload }: PayloadAction<$0>) {",
      "  ",
      "},"
    ]
  },
  "Generate Redux Toolkit - Multi Async Action Reducer": {
    "prefix": "!sliceaddcases",
    "description": "슬라이스 내 비동기 액션 리듀서 3종류를 만든다.",
    "body": [
      ".addCase(${1:effAsyncAction}.pending, (state, { meta }) => {",
      "  state.loading = true;",
      "})",
      ".addCase(${1:effAsyncAction}.rejected, (state, { payload, error }) => {",
      "  state.loading = false;",
      "})",
      ".addCase(${1:effAsyncAction}.fulfilled, (state, { payload }) => {",
      "  state.loading = false;",
      "  ${0}",
      "})"
    ]
  },
  "Generate Redux Toolkit - Single Async Action Reducer": {
    "prefix": "!sliceaddcase",
    "description": "슬라이스 내 비동기 액션 리듀서 1개를 만든다.",
    "body": [
      ".addCase(${1:effAsyncAction}.${2|pending,fulfilled,rejected|}, (state, { meta, payload }) => {",
      "  ${0}",
      "})",
    ]
  },
  "Generate Reducer File": {
    "prefix": "!reducersfile",
    "description": "기능 모듈의 리듀서 파일을 만든다.",
    "body": [
      "import { combineReducers } from 'redux';",
      "import {",
      "  ${TM_DIRECTORY/^.+\\/(.*)$/$1/}${1/(.*)/${0:/capitalize}/}Slice,",
      "} from './stores';",
      "",
      "export const ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Reducer = combineReducers({",
      "  ${1:name}: ${TM_DIRECTORY/^.+\\/(.*)$/$1/}${1/(.*)/${0:/capitalize}/}Slice.reducer,",
      "});",
    ]
  },
  "Add Single Reducer": {
    "prefix": "!reducer",
    "description": "기능 모듈의 리듀서 하나를 추가한다.",
    "body": [
      "${1:name}: ${TM_DIRECTORY/^.+\\/(.*)$/$1/}${1/(.*)/${0:/capitalize}/}Slice${0}.reducer,",
    ]
  },
  "Generate Route File": {
    "prefix": "!routes",
    "description": "기능 모듈의 라우트 파일을 만든다.",
    "body": [
      "import React from 'react';",
      "import { RouteObject } from 'react-router-dom';",
      "",
      "const ${1:CompPage} = React.lazy(() => import('./pages/${1}'));",
      "",
      "export const ${2:techBook}Routes: RouteObject[] = [",
      "  {",
      "    path: '/${2}',",
      "    Component: ${1},",
      "  }",
      "];"
    ]
  },
  "Generate Create Function": {
    "prefix": "!createdto",
    "description": "특정 타입에 대한 팩토리 함수를 만든다.",
    "body": [
      "export function create${1:SomeDto}() {",
      "  const ${0}result: ${1}${2} = {",
      "  ",
      "  };",
      "  return result;",
      "}",
    ]
  },
  "Generate Convert Function": {
    "prefix": "!convertdto",
    "description": "특정 타입에 대한 변환 함수를 만든다.",
    "body": [
      "export function to${1:SomeDto}(${2|entity,params,uiState,item,payload,args,dto,data|}: ChangePlease) {",
      "  const ${0}result: ${1}${3} = {",
      "  ",
      "  };",
      "  return result;",
      "}",
    ]
  },
  "Generate Refine Function": {
    "prefix": "!refinedto",
    "description": "특정 타입에 대한 정제 함수를 만든다.",
    "body": [
      "export function refine${1:SomeDto}(${2|data,origin,raw,queries|}: ${1}) {",
      "  const ${0}result: ${1}${4} = {",
      "  ",
      "  };",
      "  return result;",
      "}",
    ]
  },
  "Generate React Context File": {
    "prefix": "!ctxfile",
    "description": "간단한 컨텍스트 파일을 만든다.",
    "body": [
      "import { createContext, useContext } from 'react';",
      "",
      "const ${TM_FILENAME_BASE/(.*)\\.context/${1:/capitalize}/g}Context = createContext(",
      ");",
      "",
      "export const ${TM_FILENAME_BASE/(.*)\\.context/${1:/capitalize}/g}CtxProvider = ${TM_FILENAME_BASE/(.*)\\.context/${1:/capitalize}/g}Context.Provider;",
      "",
      "export function use${TM_FILENAME_BASE/(.*)\\.context/${1:/capitalize}/g}Ctx() {",
      "  const value = useContext(${TM_FILENAME_BASE/(.*)\\.context/${1:/capitalize}/g}Context);",
      "",
      "  return value;",
      "}",
      ""
    ]
  },
  "Generate Query Hooks": {
    "prefix": "!queryhooks",
    "description": "자체 캐싱 기능을 가지는 쿼리 훅스를 만든다.",
    "body": [
      "import { createQuery } from '@common/createQuery';",
      "import repo from '@core/repo';",
      "",
      "export const ${TM_FILENAME_BASE} = createQuery<ResultUiState, Payload>({",
      "  fetcher: repo.some.fetch,",
      "  key: '${TM_FILENAME_BASE/(.*)use/${1:/capitalize}/g}',",
      "  subKeysFromParams: [] as (keyof ResultUiState)[],",
      "  cache: 'session',",
      "  expired: 60,",
      "  defaultData: null,",
      "  parameterConverter: (params) => {",
      "  },",
      "  resultConverter: (result) => {",
      "  },",
      "});",
      ""
    ]
  },
  "Generate Entity Template": {
    "prefix": "!entity",
    "description": "파일명 기반의 간단한 엔티티 껍데기 만들기.",
    "body": [
      "export interface ${TM_FILENAME_BASE/(.*)\\.entity/${1:/capitalize}/g}${2}${3|Entity,Params,Dto|} {",
      "  ${0}",
      "}"
    ]
  },
  "Generate UI State Template": {
    "prefix": "!uistate",
    "description": "파일명 기반의 간단한 UI 상태 껍데기 만들기.",
    "body": [
      "export interface ${TM_FILENAME_BASE/(.*)\\.uiState/${1:/capitalize}/g}${2}${3|UiState,UiParams,Payload,Dto|} {",
      "  ${0}",
      "}"
    ]
  },
}
